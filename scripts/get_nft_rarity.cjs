const { createPublicClient, http } = require('viem');
const { MONAD_TESTNET_CONFIG, CONTRACTS } = require('./config.cjs');

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä ABI, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è —á—Ç–µ–Ω–∏—è meta/state
const crazyOctagonCoreAbi = [
    {
        type: 'function',
        stateMutability: 'view',
        name: 'meta',
        inputs: [
            { name: '', type: 'uint256' },
        ],
        outputs: [
            { name: 'rarity', type: 'uint8' },
            { name: 'initialStars', type: 'uint8' },
            { name: 'gender', type: 'uint8' },
            { name: 'isActivated', type: 'bool' },
        ],
    },
    {
        type: 'function',
        stateMutability: 'view',
        name: 'state',
        inputs: [
            { name: '', type: 'uint256' },
        ],
        outputs: [
            { name: 'lastPingTime', type: 'uint48' },
            { name: 'lastBreedTime', type: 'uint48' },
            { name: 'currentStars', type: 'uint8' },
            { name: 'bonusStars', type: 'uint8' },
            { name: 'isInGraveyard', type: 'bool' },
            { name: 'lockedOcta', type: 'uint256' },
        ],
    },
];

const CORE_PROXY_ADDRESS = CONTRACTS.CORE_PROXY;
const NFT_ID = 93n; // Use BigInt for tokenId

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Monad Testnet
const publicClient = createPublicClient({
  chain: MONAD_TESTNET_CONFIG,
  transport: http(MONAD_TESTNET_CONFIG.rpcUrls.default.http[0]),
});

async function main() {
    console.log(`–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è NFT ID ${NFT_ID}...`);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–æ–¥—Å–∫—É—é —Ä–µ–¥–∫–æ—Å—Ç—å
        const metaResult = await publicClient.readContract({
            address: CORE_PROXY_ADDRESS,
            abi: crazyOctagonCoreAbi,
            functionName: 'meta',
            args: [NFT_ID]
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const stateResult = await publicClient.readContract({
            address: CORE_PROXY_ADDRESS,
            abi: crazyOctagonCoreAbi,
            functionName: 'state',
            args: [NFT_ID]
        });
        
        const [rarity, initialStars, gender, isActivated] = metaResult;
        const [lastPingTime, lastBreedTime, currentStars, bonusStars, isInGraveyard, lockedOcta] = stateResult;
        
        console.log('\n=== –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø NFT ID', NFT_ID, '===');
        
        console.log('\nüè≠ –ó–ê–í–û–î–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:');
        console.log('–†–µ–¥–∫–æ—Å—Ç—å:', rarity);
        console.log('–ù–∞—á–∞–ª—å–Ω—ã–µ –∑–≤–µ–∑–¥—ã:', initialStars);
        console.log('–ü–æ–ª:', gender === 1 ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π');
        console.log('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', isActivated ? '–î–∞' : '–ù–µ—Ç');
        
        console.log('\n‚≠ê –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
        console.log('–¢–µ–∫—É—â–∏–µ –∑–≤–µ–∑–¥—ã:', currentStars);
        console.log('–ë–æ–Ω—É—Å–Ω—ã–µ –∑–≤–µ–∑–¥—ã:', bonusStars);
        console.log('–û–±—â–∏–µ –∑–≤–µ–∑–¥—ã:', Number(currentStars) + Number(bonusStars));
        console.log('–í –∫–ª–∞–¥–±–∏—â–µ:', isInGraveyard ? '–î–∞' : '–ù–µ—Ç');
        console.log('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ OCTA:', lockedOcta.toString());
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
        const rarityNames = {
            1: '–û–±—ã—á–Ω–∞—è',
            2: '–ù–µ–æ–±—ã—á–Ω–∞—è', 
            3: '–†–µ–¥–∫–∞—è',
            4: '–≠–ø–∏—á–µ—Å–∫–∞—è',
            5: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è',
            6: '–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è'
        };
        
        console.log('\nüìä –ê–ù–ê–õ–ò–ó:');
        console.log('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏:', rarityNames[rarity] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ–Ω—É—Å –æ—Ç —Ä–æ–¥–æ–≤
        if (Number(bonusStars) > 0) {
            console.log('üéâ –ë–û–ù–£–° –û–¢ –†–û–î–û–í: +' + bonusStars + ' –∑–≤–µ–∑–¥!');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–≤–µ–∑–¥–∞—Ö
        const starDiff = Number(currentStars) - Number(initialStars);
        if (starDiff !== 0) {
            console.log('üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥:', starDiff > 0 ? '+' + starDiff : starDiff);
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        if (Number(lastPingTime) > 0) {
            const pingDate = new Date(Number(lastPingTime) * 1000);
            console.log('üèì –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∏–Ω–≥:', pingDate.toLocaleString('ru-RU'));
        }
        
        if (Number(lastBreedTime) > 0) {
            const breedDate = new Date(Number(lastBreedTime) * 1000);
            console.log('üë∂ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–æ–¥—ã:', breedDate.toLocaleString('ru-RU'));
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö NFT:', error);
    }
}

main();
