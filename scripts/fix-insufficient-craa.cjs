const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
const localesDir = path.join(__dirname, '..', 'lib', 'locales');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
const localeFiles = [
  'en.json',
  'ru.json', 
  'tr.json',
  'es.json',
  'ko.json',
  'hi.json',
  'zh.json',
  'uk.json'
];

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º insufficientCRAA ‚Üí insufficientOCTA –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...\n');

localeFiles.forEach(filename => {
  const filePath = path.join(localesDir, filename);
  
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è  –§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    return;
  }

  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω
    const matches = content.match(/insufficientCRAA/g);
    const count = matches ? matches.length : 0;
    
    if (count === 0) {
      console.log(`‚úÖ ${filename}: –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π insufficientCRAA`);
      return;
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
    const newContent = content.replace(/insufficientCRAA/g, 'insufficientOCTA');
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    fs.writeFileSync(filePath, newContent, 'utf8');
    
    console.log(`‚úÖ ${filename}: –∑–∞–º–µ–Ω–µ–Ω–æ ${count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π insufficientCRAA ‚Üí insufficientOCTA`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filename}:`, error.message);
  }
});

console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
console.log('üí° –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ dev —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.');