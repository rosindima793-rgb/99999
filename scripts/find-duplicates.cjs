#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –∫–æ–¥–∞
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
 */

const fs = require('fs');
const path = require('path');

const ROOT_DIR = path.join(__dirname, '..');
const COMPONENTS_DIR = path.join(ROOT_DIR, 'components');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –ì—Ä—É–ø–ø—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const componentGroups = {
  'NFT Cards': [
    'NFTPingCard.tsx',
    'NFTBurnCard.tsx',
    'NFTGraveyardCard.tsx',
    'UnifiedNftCard.tsx',
    'BurnedNftCard.tsx',
    'GraveyardCubeCard.tsx',
    'BreedCard.tsx',
    'BurnCard.tsx',
  ],
  'Coin Effects': [
    'coin-rain.tsx',
    'coins-animation.tsx',
    'falling-coins-animation.tsx',
    'CoinBurst.tsx',
  ],
  'Fire/Plasma Effects': [
    'fire-animation.tsx',
    'fire-effect.tsx',
    'plasma-animation.tsx',
    'plasma-effect.tsx',
    'burn-effect.tsx',
    'burning-paper-effect.tsx',
  ],
  'Crystal Effects': [
    'crystal-effect.tsx',
    'crystal-card-effect.tsx',
  ],
  'Particle Effects': [
    'particle-effect.tsx',
    'DustParticles.tsx',
    'ash-effect.tsx',
    'ash-rain.tsx',
    'SparkRain.tsx',
    'SparkProjectiles.tsx',
  ],
  'Animation Overlays': [
    'CrackOverlay.tsx',
    'card-burn-overlay.tsx',
    'card-plasma-overlay.tsx',
    'BurnAnimationOverlay.tsx',
  ],
  'Forms': [
    'BreedForm.tsx',
    'ClaimRewardsForm.tsx',
  ],
  'Lightning/Background': [
    'background-lightning.tsx',
    'nft-lightning-effect.tsx',
  ],
};

function getFileSize(filePath) {
  try {
    const stats = fs.statSync(filePath);
    return stats.size;
  } catch {
    return 0;
  }
}

function getFileLines(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    return content.split('\n').length;
  } catch {
    return 0;
  }
}

function analyzeImports(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    const imports = content.match(/^import .+ from .+$/gm) || [];
    return imports.length;
  } catch {
    return 0;
  }
}

function analyzeHooks(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    const hooks = content.match(/use[A-Z]\w+/g) || [];
    return [...new Set(hooks)];
  } catch {
    return [];
  }
}

function analyzeProps(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    const interfaceMatch = content.match(/interface \w+Props \{([^}]+)\}/s);
    if (interfaceMatch) {
      const props = interfaceMatch[1].match(/\w+:/g) || [];
      return props.map(p => p.replace(':', ''));
    }
    return [];
  } catch {
    return [];
  }
}

function calculateSimilarity(file1Data, file2Data) {
  let score = 0;
  let maxScore = 0;
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ hooks
  const commonHooks = file1Data.hooks.filter(h => file2Data.hooks.includes(h));
  score += commonHooks.length * 2;
  maxScore += Math.max(file1Data.hooks.length, file2Data.hooks.length) * 2;
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ props
  const commonProps = file1Data.props.filter(p => file2Data.props.includes(p));
  score += commonProps.length * 3;
  maxScore += Math.max(file1Data.props.length, file2Data.props.length) * 3;
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
  const sizeDiff = Math.abs(file1Data.size - file2Data.size) / Math.max(file1Data.size, file2Data.size);
  if (sizeDiff < 0.3) score += 2;
  maxScore += 2;
  
  return maxScore > 0 ? (score / maxScore) * 100 : 0;
}

function analyzeGroup(groupName, files) {
  log(`\nüì¶ –ì—Ä—É–ø–ø–∞: ${groupName}`, 'blue');
  log('‚îÄ'.repeat(60), 'blue');
  
  const filesData = [];
  let totalSize = 0;
  let totalLines = 0;
  
  // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–∞—Ö
  for (const file of files) {
    const filePath = path.join(COMPONENTS_DIR, file);
    
    if (!fs.existsSync(filePath)) {
      log(`  ‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω: ${file}`, 'yellow');
      continue;
    }
    
    const size = getFileSize(filePath);
    const lines = getFileLines(filePath);
    const imports = analyzeImports(filePath);
    const hooks = analyzeHooks(filePath);
    const props = analyzeProps(filePath);
    
    totalSize += size;
    totalLines += lines;
    
    filesData.push({
      name: file,
      path: filePath,
      size,
      lines,
      imports,
      hooks,
      props,
    });
    
    log(`  üìÑ ${file}`, 'cyan');
    log(`     –†–∞–∑–º–µ—Ä: ${(size / 1024).toFixed(2)} KB | –°—Ç—Ä–æ–∫: ${lines} | –ò–º–ø–æ—Ä—Ç–æ–≤: ${imports}`, 'reset');
    if (hooks.length > 0) {
      log(`     Hooks: ${hooks.join(', ')}`, 'reset');
    }
    if (props.length > 0) {
      log(`     Props: ${props.join(', ')}`, 'reset');
    }
  }
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
  if (filesData.length > 1) {
    log(`\n  üîç –ê–Ω–∞–ª–∏–∑ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏:`, 'magenta');
    
    for (let i = 0; i < filesData.length; i++) {
      for (let j = i + 1; j < filesData.length; j++) {
        const similarity = calculateSimilarity(filesData[i], filesData[j]);
        
        if (similarity > 30) {
          const color = similarity > 70 ? 'red' : similarity > 50 ? 'yellow' : 'green';
          log(`     ${filesData[i].name} ‚Üî ${filesData[j].name}: ${similarity.toFixed(0)}%`, color);
        }
      }
    }
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã
  log(`\n  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã:`, 'green');
  log(`     –§–∞–π–ª–æ–≤: ${filesData.length}`, 'reset');
  log(`     –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(totalSize / 1024).toFixed(2)} KB`, 'reset');
  log(`     –û–±—â–µ–µ —Å—Ç—Ä–æ–∫: ${totalLines}`, 'reset');
  log(`     –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: ${(totalSize / filesData.length / 1024).toFixed(2)} KB`, 'reset');
  
  return {
    groupName,
    filesCount: filesData.length,
    totalSize,
    totalLines,
  };
}

function generateReport(groupsStats) {
  log('\n\n' + '‚ïê'.repeat(60), 'blue');
  log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢', 'blue');
  log('‚ïê'.repeat(60), 'blue');
  
  let totalFiles = 0;
  let totalSize = 0;
  let totalLines = 0;
  
  for (const stats of groupsStats) {
    totalFiles += stats.filesCount;
    totalSize += stats.totalSize;
    totalLines += stats.totalLines;
  }
  
  log(`\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, 'green');
  log(`   –ì—Ä—É–ø–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${groupsStats.length}`, 'reset');
  log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`, 'reset');
  log(`   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(totalSize / 1024).toFixed(2)} KB`, 'reset');
  log(`   –û–±—â–µ–µ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${totalLines}`, 'reset');
  
  log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`, 'yellow');
  log(`   1. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –ø–æ—Ö–æ–∂–µ—Å—Ç—å—é >70% - –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ`, 'reset');
  log(`   2. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã`, 'reset');
  log(`   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è`, 'reset');
  log(`   4. –í—ã–Ω–µ—Å–∏—Ç–µ –æ–±—â—É—é –ª–æ–≥–∏–∫—É –≤ —Ö—É–∫–∏`, 'reset');
  
  log(`\nüéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è:`, 'green');
  log(`   –ü—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥—É–±–ª–µ–π: ~${(totalSize * 0.3 / 1024).toFixed(2)} KB (-30%)`, 'reset');
  log(`   –ü—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ: ~${(totalLines * 0.25).toFixed(0)} —Å—Ç—Ä–æ–∫ (-25%)`, 'reset');
}

function main() {
  log('\nüîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –∫–æ–¥–∞', 'blue');
  log('‚ïê'.repeat(60), 'blue');
  
  const groupsStats = [];
  
  for (const [groupName, files] of Object.entries(componentGroups)) {
    const stats = analyzeGroup(groupName, files);
    groupsStats.push(stats);
  }
  
  generateReport(groupsStats);
  
  log('\n‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n', 'green');
}

// –ó–∞–ø—É—Å–∫
main();
