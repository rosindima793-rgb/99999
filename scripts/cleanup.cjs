#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
 * –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã –∏ —É—Å—Ç–∞—Ä–µ–≤—à—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
 */

const fs = require('fs');
const path = require('path');

const ROOT_DIR = path.join(__dirname, '..');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
const filesToDelete = [
  // –ü—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
  'components/crack-overlay.tsx',
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  'tmp_check_burn_info.mjs',
  'tmp_graphql_resp.json',
  'tmp_graphql_resp2.json',
  
  // –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
  'OPTIMIZATION_DONE.md',
  'OPTIMIZATION_COMPLETE.md',
  'FINAL_FIXES_SUMMARY.md',
  'FINAL_NFT_INSPECTOR_FIX.md',
  'FINAL_PING_FIX.md',
  'FINAL_SUMMARY.md',
  'COMPLETION_SUMMARY.md',
  'TECHNICAL_ISSUES_SUMMARY.md',
  'PING_FIX_SUMMARY.md',
  'NFT_INSPECTOR_FIX.md',
  'NFT_INSPECTOR_FIX_SUMMARY.md',
  'QUICK_DEPLOY.md',
  'QUICK_FIX_INSTRUCTIONS.md',
  'MONAD_DESIGN_IMPROVEMENTS.md',
  'MONAD_DESIGN_UPDATE.md',
  'DESIGN_EVALUATION.md',
  'DESIGN_IMPROVEMENTS_SUMMARY.md',
  'DESIGN_IMPROVEMENT_PLAN.md',
  'CRACK_EFFECTS_IMPROVEMENT.md',
  'MAIN_PAGE_IMPROVEMENTS.md',
];

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = {
  deleted: 0,
  notFound: 0,
  errors: 0,
  totalSize: 0,
};

function deleteFile(relativePath) {
  const fullPath = path.join(ROOT_DIR, relativePath);
  
  try {
    if (fs.existsSync(fullPath)) {
      const fileStats = fs.statSync(fullPath);
      const sizeKB = (fileStats.size / 1024).toFixed(2);
      
      fs.unlinkSync(fullPath);
      stats.deleted++;
      stats.totalSize += fileStats.size;
      
      log(`‚úì –£–¥–∞–ª–µ–Ω: ${relativePath} (${sizeKB} KB)`, 'green');
    } else {
      stats.notFound++;
      log(`‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω: ${relativePath}`, 'yellow');
    }
  } catch (error) {
    stats.errors++;
    log(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${relativePath}: ${error.message}`, 'red');
  }
}

function findEmptyFiles(dir, emptyFiles = []) {
  try {
    const files = fs.readdirSync(dir);
    
    for (const file of files) {
      const fullPath = path.join(dir, file);
      const stat = fs.statSync(fullPath);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules, .next, .git
      if (stat.isDirectory()) {
        const dirName = path.basename(fullPath);
        if (!['node_modules', '.next', '.git', '.history', '.qodo', '.qoder'].includes(dirName)) {
          findEmptyFiles(fullPath, emptyFiles);
        }
      } else if (stat.isFile() && stat.size === 0) {
        emptyFiles.push(path.relative(ROOT_DIR, fullPath));
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  }
  
  return emptyFiles;
}

function main() {
  log('\nüßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞...\n', 'blue');
  
  // 1. –£–¥–∞–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
  log('üìù –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', 'magenta');
  filesToDelete.forEach(deleteFile);
  
  // 2. –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
  log('\nüîç –ü–æ–∏—Å–∫ –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤...', 'magenta');
  const emptyFiles = findEmptyFiles(ROOT_DIR);
  
  if (emptyFiles.length > 0) {
    log(`\n–ù–∞–π–¥–µ–Ω–æ ${emptyFiles.length} –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤:`, 'yellow');
    emptyFiles.forEach(file => {
      log(`  - ${file}`, 'yellow');
    });
    
    log('\n–£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã...', 'magenta');
    emptyFiles.forEach(deleteFile);
  } else {
    log('–üÔøΩÔøΩ—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'green');
  }
  
  // 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', 'blue');
  log(`  ‚úì –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${stats.deleted}`, 'green');
  log(`  ‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${stats.notFound}`, 'yellow');
  log(`  ‚úó –û—à–∏–±–æ–∫: ${stats.errors}`, stats.errors > 0 ? 'red' : 'green');
  log(`  üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: ${(stats.totalSize / 1024).toFixed(2)} KB`, 'green');
  
  // 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', 'blue');
  log('  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm prune (—É–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)', 'cyan');
  log('  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: rm -rf .next (–æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Next.js)', 'cyan');
  log('  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run build (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–±–æ—Ä–∫—É)', 'cyan');
  log('  4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ git status –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º', 'cyan');
  
  log('\n‚ú® –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n', 'green');
}

// –ó–∞–ø—É—Å–∫
main();
